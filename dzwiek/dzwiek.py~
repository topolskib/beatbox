def sin_custom(f,T,a=0,b=0):
    fs=44100
    t=np.linspace(0,T,T*fs)
    A=np.floor(a*fs*T)
    D=np.floor(b*fs*T)
    S1=np.linspace(0,1,A)
    S2=np.ones(T*fs-A-D)
    S3=np.linspace(1,0,D)
    S0=np.sin(2*np.pi*f*t)    
    return(np.hstack((S1,S2,S3))*S0)
def saw_custom(f,T,a=0,b=0):
	fs=44100
	t=np.linspace(0,T,T*fs)
	A=np.floor(a*fs*T)
	D=np.floor(b*fs*T)
	S1=np.linspace(0,1,A)
	S2=np.ones(T*fs-A-D)
	S3=np.linspace(1,0,D)
	S0=signal.sawtooth(2 * np.pi * f * t)    
	return(np.hstack((S1,S2,S3))*S0)
def sq_custom(f,T,a=0,b=0):
	fs=44100
	t=np.linspace(0,T,T*fs)
	A=np.floor(a*fs*T)
	D=np.floor(b*fs*T)
	S1=np.linspace(0,1,A)
	S2=np.ones(T*fs-A-D)
	S3=np.linspace(1,0,D)
	S0=signal.square(2 * np.pi * f * t)
	return(np.hstack((S1,S2,S3))*S0)

def custom_sound(type_of, attack, decay, cutoff, coef, time, freq):
    dzw = np.zeros(time*44100)
    l=0
    for i in type_of:
        if i=="sin":
            dzw+= coef[l]*sin_custom(freq,time,attack[l],decay[l])
        if i=="sq":
            dzw+= coef[l]*sq_custom(freq,time,attack[l],decay[l])
        if i=="saw":
            dzw+= coef[l]*saw_custom(freq,time,attack[l],decay[l])
        l+=1    
    dzw[(1-cutoff)*time*44100 -1:]==0
    dzw = np.repeat(dzw,2).reshape(len(dzw),2)
    dzw = dzw/np.amax(dzw)
    return(dzw)
